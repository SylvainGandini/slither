// Code generated by go-bindata.
// sources:
// slither-container.html
// DO NOT EDIT!

package slither

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _slitherContainerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\xdd\x6e\xe3\x36\x13\xbd\xcf\x53\xf0\x13\xf0\x61\x6d\x6c\xfc\x93\xb4\x37\xb5\x65\x03\x6d\xd6\xc1\x06\xd8\xb4\x8b\xec\x16\x45\x2f\x29\x69\x64\xb3\xa1\x48\x95\xa4\xec\x78\xbb\x79\xf7\x0e\x45\x4a\xd6\x8f\x9d\xb8\xf1\x8d\x28\xce\x9c\x99\xc3\x43\xce\x50\x0e\xff\xf7\xe1\xb7\x9b\xaf\x7f\x7e\x5e\x91\x8d\xc9\xf8\xf2\x22\xac\x1e\x40\x93\xe5\x05\xc1\x5f\xa8\xcd\x9e\x83\x1b\xdb\x9f\x75\xb8\x24\x91\x4c\xf6\xe4\x9f\x7a\xb2\x34\x00\x5b\x6f\xcc\x8c\x5c\x4d\xa7\xff\x9f\xb7\x2c\x19\x55\x6b\x26\x66\x64\x7a\x98\x7e\xbe\x68\x05\xec\x84\xda\xb1\xc4\x6c\xba\x91\x1a\x90\x23\xd9\x0d\x3c\x99\x11\xe5\x6c\x8d\x79\x62\x10\x06\x54\x9b\xc3\x16\x94\x61\x31\xe5\x95\x4f\xc6\x92\x84\x43\xdb\x27\xa2\xf1\xe3\x5a\xc9\x42\x24\xa3\x58\x72\xa9\x66\x24\xe2\x38\xd5\x76\x92\x18\x29\xe5\x72\x37\x23\x1b\x0c\x01\xe2\x28\xc1\x71\xa4\x72\x2a\xa0\xbb\xae\x5c\x6a\x66\x98\xc4\xf4\x29\x7b\x82\xa4\x93\x5d\x1a\x23\xb3\x19\xb9\xce\x9f\xda\x06\xe5\x74\xed\xcd\xcb\x9c\xc6\xcc\xec\x51\xd7\xf1\x8f\xaf\x2d\xc4\x28\x2a\x74\x4e\x15\x2a\xd3\x76\x2d\x34\xa8\x91\x06\x0e\x31\xa6\x10\x52\x74\x24\x19\x65\xf2\xdb\xe8\x35\x9f\x1d\x44\x8f\xcc\xbc\xea\x96\xe9\x97\x5c\x9a\xea\xc5\x5c\xc6\x8f\x1d\xed\x52\x29\x0c\x66\x72\x5a\x44\x92\x77\xd4\x2b\xcd\x9a\x7d\x03\x14\xaa\x77\x00\xbd\x08\xaa\x2b\x79\x5c\x28\x6d\x0d\x09\xa4\xb4\xe0\xe6\x38\x99\x54\x47\x05\xee\x8c\x78\x33\x9f\xab\x1f\x4e\xf0\xe1\x16\xbc\x56\x74\x7f\x9c\x55\x2e\x59\xff\x1c\x47\x52\x25\xa0\x4e\xd5\xd2\x58\x73\x66\x36\xa8\x71\xaa\x68\x06\x1d\xc6\xa7\xa1\xe1\xc4\x17\x79\x38\x71\x85\x1f\xda\x0a\xc3\x47\xc2\xb6\x24\xe6\x54\xeb\x45\xe0\x4f\x74\xe0\xbb\x42\xc3\x52\xee\x56\x40\x58\x52\x0d\x97\x57\xd7\xb3\xe9\x94\xfc\x7c\x1f\x4e\xd0\xad\x0f\xa8\x14\x75\x98\xfa\x6d\x79\xfb\xfb\xa7\x4f\x5f\x6e\x1e\x56\xab\x5f\x3d\xb0\x7a\x30\xb7\x1c\x0f\x6f\xad\xd1\xc5\xf0\x53\x01\xd1\x2a\x5e\x04\x1b\x63\x72\x3d\x9b\x4c\xfc\xec\x98\xc9\x49\xb0\x0c\x27\x2e\x0a\x86\xd3\xb1\x62\xb9\x21\x66\x9f\xc3\x22\xb0\x8d\x63\xf2\x17\xdd\x52\x37\xeb\xd7\xb7\xa5\x8a\xf8\xac\x0b\x92\xc8\xb8\xc8\xb0\x72\xc6\x6b\x30\x2b\x0e\x76\xf8\xcb\xfe\x2e\x19\xd4\x69\x87\x4e\x51\x07\x18\x4b\x11\xf1\x42\x21\x2e\x2d\x44\x6c\xcb\x9d\x0c\x86\x8d\xad\xf0\x5e\x29\x06\xd5\x83\x61\x39\xfd\x3c\x77\xfb\xb0\x63\x22\x91\x3b\x0c\xa0\xc0\x1e\x9d\x93\x21\x2c\xbb\x8c\x09\xb4\xdf\x53\xb3\x19\xe3\x70\xe0\xa1\x4c\x08\x50\x1f\xcb\x53\x79\x49\x9a\x73\x7f\xd8\x96\x3a\x9c\x77\x59\x94\x9d\x16\xe3\x60\x88\x9e\xcd\x35\xf4\xa6\xf1\x79\x7e\x8c\xe6\x60\xe8\xe9\x5b\x5a\x75\xb5\xbc\x20\x5b\xbd\xe3\x9e\x4f\xf5\x8e\x11\x63\xce\xb0\xf2\x4f\x4b\x47\x06\x75\xd4\xb4\xe0\x1c\xf7\x0c\x40\x90\xef\xdf\x0f\xc9\x5c\x33\xba\xd3\xb7\x68\xfe\xd2\x37\x63\x3f\x3b\x58\x86\x9d\x0a\xb1\x0b\x80\x54\x37\xb9\xc3\x13\x33\xb7\x75\xa6\x96\x77\xf7\xd7\x67\xb1\x7a\x1b\x18\x39\xde\x50\x11\x03\x3f\x30\x3d\x1f\xab\xcf\x48\xda\x6e\x29\xb8\xe2\x31\xde\x8c\xbc\x96\xb6\x71\x4c\x9e\x09\x70\xdd\x6d\x24\xa5\x4c\xbc\xa9\x52\x35\xf0\xdb\x3c\xef\xb9\xab\x52\x55\xe0\x63\x05\x7f\x17\xa0\xff\x83\x2a\x88\x71\x62\x3e\x1c\x90\xe7\x69\x82\x48\x54\xf2\x4d\x30\xfd\x70\x16\xcd\xce\x3d\x5d\xe9\x08\xbc\xa9\x60\x3d\xaa\x8f\xb9\x6d\x0f\x83\x7e\x2d\xfa\x8e\x30\x6f\xb5\x04\x2b\x9e\xbb\x0e\x4f\x17\xd4\xbb\xd2\xe1\x5d\x55\x4d\x55\xe9\x68\x30\x37\xd6\xd0\x6b\x1d\x09\xc6\x12\xb0\x23\x1f\xa8\x81\x26\x0f\x6b\x13\x1b\x59\xf6\xae\xc4\x26\xf9\x88\x63\x64\x74\x49\x84\xeb\x36\xe5\xe4\x3d\x13\x85\x81\x72\x9a\xe6\xf3\x56\x6d\x7a\xf0\x82\x4c\xbb\x95\x45\x73\x84\x07\x78\x25\x04\x6d\xcd\xaa\x74\x57\xd7\xbd\x33\x77\x08\x18\xa2\xf9\x9c\x80\x3d\xe0\x62\x71\x1a\xf9\xf9\x45\xe4\xf2\x4c\xe0\x61\x0d\xa3\xce\x22\x2e\xda\xca\x58\x01\xc3\x05\xf9\xa9\x1b\xd4\x2b\x1b\x4c\x03\xf2\xbe\x7c\x39\x1a\xa2\xdc\x60\xd7\xc8\xbf\xe2\x7d\x65\x01\xa5\x7f\x99\xf9\x3d\x09\x66\x15\x1a\x1f\xd5\xa6\x78\xf8\xe1\x14\xcc\xab\xf7\x3b\xfb\x59\xb1\xa5\x7c\x50\xd9\x2e\xed\xa7\xf6\x14\x1d\xf0\x43\xa0\xbc\x05\xed\xd5\xeb\x3f\x01\x26\xee\x1f\xc1\xbf\x01\x00\x00\xff\xff\x61\x04\xba\xc5\x29\x0c\x00\x00")

func slitherContainerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_slitherContainerHtml,
		"slither-container.html",
	)
}

func slitherContainerHtml() (*asset, error) {
	bytes, err := slitherContainerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "slither-container.html", size: 3113, mode: os.FileMode(420), modTime: time.Unix(1478305857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"slither-container.html": slitherContainerHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"slither-container.html": &bintree{slitherContainerHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
